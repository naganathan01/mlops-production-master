trigger:
  branches:
    include:
    - main
    - develop
    - feature/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  pythonVersion: '3.9'
  containerRegistry: 'mlopsacr.azurecr.io'
  imageRepository: 'ml-model-api'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'

stages:
- stage: Test
  displayName: 'Test and Quality Assurance'
  jobs:
  - job: UnitTests
    displayName: 'Unit Tests'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pythonVersion)
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
      displayName: 'Install dependencies'
    
    - script: |
        pytest tests/unit/ --cov=src --cov-report=xml --cov-report=html --junitxml=junit.xml -v
      displayName: 'Run unit tests'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'junit.xml'
        testRunTitle: 'Unit Tests'
      condition: succeededOrFailed()
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'coverage.xml'
      condition: succeededOrFailed()

  - job: SecurityScan
    displayName: 'Security Scanning'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pythonVersion)
    
    - script: |
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r src/ -f json -o bandit-report.json || true
      displayName: 'Security scan'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'bandit-report.json'
        artifactName: 'security-report'

  - job: ModelValidation
    displayName: 'Model Validation'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pythonVersion)
    
    - script: |
        pip install -r requirements.txt
        python -m pytest tests/integration/test_model_validation.py -v
      displayName: 'Validate model performance'
      env:
        MLFLOW_TRACKING_URI: $(MLFLOW_TRACKING_URI)

- stage: Build
  displayName: 'Build and Push'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Docker
    displayName: 'Build Docker Image'
    steps:
    - task: Docker@2
      displayName: 'Build and push Docker image'
      inputs:
        command: 'buildAndPush'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(containerRegistry)
        tags: |
          $(Build.BuildId)
          latest
        
    - script: |
        # Run container security scan
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $HOME/Library/Caches:/root/.cache/ \
          aquasec/trivy image $(containerRegistry)/$(imageRepository):$(Build.BuildId)
      displayName: 'Container security scan'
      continueOnError: true

- stage: DeployStaging
  displayName: 'Deploy to Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy to Staging Environment'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'staging-k8s'
              namespace: 'ml-staging'
              manifests: |
                infrastructure/kubernetes/namespace.yaml
                infrastructure/kubernetes/deployment.yaml
                infrastructure/kubernetes/service.yaml
              containers: '$(containerRegistry)/$(imageRepository):$(Build.BuildId)'
          
          - script: |
              # Wait for deployment
              kubectl wait --for=condition=available --timeout=300s deployment/ml-model-api -n ml-staging
              
              # Run smoke tests
              python tests/integration/test_api_health.py --endpoint http://ml-staging.internal/health
            displayName: 'Post-deployment validation'